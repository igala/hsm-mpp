plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.3.61'
}
repositories {
    mavenCentral()
}
group 'com.example'
version '0.0.1'

apply plugin: 'maven-publish'

kotlin {
    jvm()
    // This is for iPhone emulator
    // Switch here to iosArm64 (or iosArm32) to build library for iPhone device
    iosX64("ios") {
        binaries {
            framework()
        }
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib')
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
                implementation 'ch.qos.logback:logback-classic:1.1.2'
                implementation 'ch.qos.logback:logback-core:1.1.2'
                implementation 'org.hamcrest:hamcrest-integration:1.3'
                implementation 'org.hamcrest:hamcrest-core:1.3'
                implementation 'org.hamcrest:hamcrest-library:1.3'

                implementation 'org.codehaus.groovy:groovy-all:2.4.0'
                implementation 'org.spockframework:spock-core:0.7-groovy-2.0'

                implementation 'junit:junit:4.12'

                implementation 'org.mockito:mockito-core:1.10.8'
            }
        }
        iosMain {
        }
        iosTest {
        }
    }
}

task iosTest {
    def device = project.findProperty("iosDevice")?.toString() ?: "iPhone 8"
    dependsOn kotlin.targets.ios.binaries.getTest('DEBUG').linkTaskName
    group = JavaBasePlugin.VERIFICATION_GROUP
    description = "Runs tests for target 'ios' on an iOS simulator"

    doLast {
        def binary = kotlin.targets.ios.binaries.getTest('DEBUG').outputFile
        exec {
            commandLine 'xcrun', 'simctl', 'spawn', device, binary.absolutePath
        }
    }
}


configurations {
    compileClasspath
}